<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.tdd.concert.api.usecase.ReserveSeatIntegrationTest" tests="2" skipped="1" failures="0" errors="0" timestamp="2024-04-27T15:50:18" hostname="Jeongui-MacBookPro.local" time="0.067">
  <properties/>
  <testcase name="사용자가 좌석을 예약한다" classname="com.tdd.concert.api.usecase.ReserveSeatIntegrationTest" time="0.059"/>
  <testcase name="다수의 요청자가 1개의 좌석을 동시에 예약하려고 한다." classname="com.tdd.concert.api.usecase.ReserveSeatIntegrationTest" time="0.002">
    <skipped/>
  </testcase>
  <system-out><![CDATA[2024-04-28T00:50:18.100+09:00  INFO 6651 --- [concert-dev] [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.tdd.concert.api.usecase.ReserveSeatIntegrationTest]: ReserveSeatIntegrationTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-04-28T00:50:18.102+09:00  INFO 6651 --- [concert-dev] [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.tdd.concert.ConcertApplication for test class com.tdd.concert.api.usecase.ReserveSeatIntegrationTest
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:18.114+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 735b90b4-5681-35ed-ac3f-678819b6e058, 사용자ID : 67
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:18.118+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
2024-04-28T00:50:18.137+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:18.140+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:18.143+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:18.143+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
Hibernate: 
    select
        cs1_0.concert_schedule_id,
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer,
        cs1_0.concert_date 
    from
        concert_schedule cs1_0 
    left join
        concert c1_0 
            on c1_0.concert_id=cs1_0.concert_id 
    where
        cs1_0.concert_schedule_id=?
2024-04-28T00:50:18.150+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:18.150+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:18.151+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:18.151+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:18.151+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:18.151+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:18.151+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:18.151+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:18.152+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
