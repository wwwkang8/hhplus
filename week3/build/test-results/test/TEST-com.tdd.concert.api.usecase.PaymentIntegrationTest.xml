<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.tdd.concert.api.usecase.PaymentIntegrationTest" tests="7" skipped="0" failures="0" errors="0" timestamp="2024-04-27T15:50:17" hostname="Jeongui-MacBookPro.local" time="0.644">
  <properties/>
  <testcase name="예약된 좌석을 결제처리한다." classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.153"/>
  <testcase name="만료시각이 지나서 사용자의 토큰이 만료된 경우 오류발생" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.125"/>
  <testcase name="이미 예약을 완료하여 토큰이 만료된 경우 오류 발생" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.057"/>
  <testcase name="토큰이 존재하지 않는 경우 오류발생." classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.056"/>
  <testcase name="임시배정이 되지 않은 좌석인 경우 예약 불가" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.072"/>
  <testcase name="이미 판매가 완료된 좌석의 경우 오류 발생" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.102"/>
  <testcase name="임시배정한 사용자ID와 결제요청한 사용자ID가 다른 경우 오류발생." classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.063"/>
  <system-out><![CDATA[2024-04-28T00:50:17.444+09:00  INFO 6651 --- [concert-dev] [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.tdd.concert.api.usecase.PaymentIntegrationTest]: PaymentIntegrationTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-04-28T00:50:17.446+09:00  INFO 6651 --- [concert-dev] [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.tdd.concert.ConcertApplication for test class com.tdd.concert.api.usecase.PaymentIntegrationTest
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:17.471+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 093f65e0-80a2-35f8-876b-1c5722a46aa2, 사용자ID : 59
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:17.474+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2024-04-28T00:50:17.488+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:17.500+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:17.503+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:17.503+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
2024-04-28T00:50:17.531+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:17.531+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:17.531+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:17.531+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:17.531+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:17.531+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:17.532+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:17.532+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:17.532+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=?
Hibernate: 
    select
        r1_0.reservation_id,
        r1_0.concert_id,
        r1_0.reservation_date,
        r1_0.reservation_status,
        r1_0.seat_id,
        r1_0.user_id 
    from
        reservation r1_0 
    where
        r1_0.user_id=? 
        and r1_0.seat_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        payment
        (created_at, pay_amount, reservation_id, user_id, payment_id) 
    values
        (?, ?, ?, ?, default)
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    update
        token 
    set
        created_at=?,
        expired_at=?,
        progress_status=?,
        token=?,
        updated_at=?,
        user_id=?,
        wait_no=? 
    where
        token_id=?
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
Hibernate: 
    update
        reservation 
    set
        concert_id=?,
        reservation_date=?,
        reservation_status=?,
        seat_id=?,
        user_id=? 
    where
        reservation_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=?
Hibernate: 
    select
        r1_0.reservation_id,
        r1_0.concert_id,
        r1_0.reservation_date,
        r1_0.reservation_status,
        r1_0.seat_id,
        r1_0.user_id 
    from
        reservation r1_0 
    where
        r1_0.user_id=? 
        and r1_0.seat_id=?
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:17.614+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 072b030b-a126-32f4-b237-4f342be9ed44, 사용자ID : 60
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:17.621+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2024-04-28T00:50:17.652+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:17.655+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:17.658+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:17.658+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
2024-04-28T00:50:17.661+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:17.661+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:17.661+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:17.662+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:17.662+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:17.662+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:17.662+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:17.662+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:17.662+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    update
        token 
    set
        created_at=?,
        expired_at=?,
        progress_status=?,
        token=?,
        updated_at=?,
        user_id=?,
        wait_no=? 
    where
        token_id=?
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:17.740+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 7f39f831-7fbd-3198-8ef4-c628eba02591, 사용자ID : 61
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:17.744+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2024-04-28T00:50:17.753+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:17.756+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:17.759+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:17.759+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
2024-04-28T00:50:17.761+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:17.761+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:17.761+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:17.762+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:17.762+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:17.762+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:17.762+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:17.762+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:17.762+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    update
        token 
    set
        created_at=?,
        expired_at=?,
        progress_status=?,
        token=?,
        updated_at=?,
        user_id=?,
        wait_no=? 
    where
        token_id=?
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:17.801+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 44f683a8-4163-3352-bafe-57c2e008bc8c, 사용자ID : 62
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:17.804+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2024-04-28T00:50:17.818+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:17.821+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:17.823+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:17.823+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
2024-04-28T00:50:17.826+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:17.826+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:17.826+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:17.826+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:17.827+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:17.827+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:17.827+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:17.827+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:17.827+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token is null
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:17.861+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : ea5d2f1c-4608-332e-87d3-aa3d998e5135, 사용자ID : 64
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:17.866+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2024-04-28T00:50:17.878+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:17.881+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:17.885+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:17.885+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
2024-04-28T00:50:17.889+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:17.889+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:17.889+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:17.890+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:17.890+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:17.890+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:17.890+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:17.890+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:17.890+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=?
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:17.937+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : fc490ca4-5c00-3124-9bbe-3554a4fdf6fb, 사용자ID : 65
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:17.956+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2024-04-28T00:50:17.981+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:17.985+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:18.004+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:18.004+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:18.007+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:18.008+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=?
Hibernate: 
    insert 
    into
        user
        (point, token, user_id) 
    values
        (?, ?, default)
2024-04-28T00:50:18.039+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 3295c76a-cbf4-3aae-933c-36b1b5fc2cb1, 사용자ID : 66
Hibernate: 
    select
        (coalesce(max(t1_0.wait_no), 0)+1) 
    from
        token t1_0
Hibernate: 
    select
        coalesce(count(t1_0.progress_status), 0) 
    from
        token t1_0 
    where
        t1_0.progress_status=?
2024-04-28T00:50:18.042+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: 
    insert 
    into
        token
        (created_at, expired_at, progress_status, token, updated_at, user_id, wait_no, token_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    insert 
    into
        concert
        (name, singer, concert_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        concert_schedule
        (concert_id, concert_date, concert_schedule_id) 
    values
        (?, ?, default)
Hibernate: 
    insert 
    into
        seat
        (concert_id, concert_schedule_id, price, seat_no, seat_status, temp_reserved_expired_at, temp_reserved_user_id, seat_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2024-04-28T00:50:18.055+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: 
    update
        user 
    set
        point=?,
        token=? 
    where
        user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
2024-04-28T00:50:18.058+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
2024-04-28T00:50:18.061+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
2024-04-28T00:50:18.061+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 occupy 메서드 진입
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=? for update
2024-04-28T00:50:18.064+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 비관적락으로 조회 완료
2024-04-28T00:50:18.064+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 진입
2024-04-28T00:50:18.064+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.seat.component.SeatValidator     : [SeatValidator] 좌석 validate 메서드 끝
2024-04-28T00:50:18.065+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 검증처리 완료
2024-04-28T00:50:18.065+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 진입
2024-04-28T00:50:18.065+09:00  INFO 6651 --- [concert-dev] [    Test worker] com.tdd.concert.domain.seat.model.Seat   : [Seat 엔티티 내부] tempOccupy 메서드 완료
2024-04-28T00:50:18.065+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.domain.seat.component.SeatManager  : [SeatManager] 좌석 tempOccupy 완료
2024-04-28T00:50:18.065+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-28T00:50:18.065+09:00  INFO 6651 --- [concert-dev] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    select
        c1_0.concert_id,
        c1_0.name,
        c1_0.singer 
    from
        concert c1_0 
    where
        c1_0.concert_id=?
Hibernate: 
    insert 
    into
        reservation
        (concert_id, reservation_date, reservation_status, seat_id, user_id, reservation_id) 
    values
        (?, ?, ?, ?, ?, default)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.point,
        u1_0.token 
    from
        user u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        t1_0.token_id,
        t1_0.created_at,
        t1_0.expired_at,
        t1_0.progress_status,
        t1_0.token,
        t1_0.updated_at,
        t1_0.user_id,
        t1_0.wait_no 
    from
        token t1_0 
    where
        t1_0.token=?
Hibernate: 
    update
        seat 
    set
        concert_id=?,
        concert_schedule_id=?,
        price=?,
        seat_no=?,
        seat_status=?,
        temp_reserved_expired_at=?,
        temp_reserved_user_id=? 
    where
        seat_id=?
Hibernate: 
    select
        s1_0.seat_id,
        s1_0.concert_id,
        s1_0.concert_schedule_id,
        s1_0.price,
        s1_0.seat_no,
        s1_0.seat_status,
        s1_0.temp_reserved_expired_at,
        s1_0.temp_reserved_user_id 
    from
        seat s1_0 
    join
        concert_schedule cs1_0 
            on cs1_0.concert_schedule_id=s1_0.concert_schedule_id 
    where
        s1_0.seat_no=? 
        and s1_0.concert_id=? 
        and cs1_0.concert_date=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
