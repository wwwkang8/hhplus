<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.tdd.concert.api.usecase.PaymentIntegrationTest" tests="7" skipped="0" failures="0" errors="0" timestamp="2024-04-18T14:25:01" hostname="Jeongui-MacBookPro.local" time="0.381">
  <properties/>
  <testcase name="예약된 좌석을 결제처리한다." classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.114"/>
  <testcase name="만료시각이 지나서 사용자의 토큰이 만료된 경우 오류발생" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.048"/>
  <testcase name="이미 예약을 완료하여 토큰이 만료된 경우 오류 발생" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.042"/>
  <testcase name="토큰이 존재하지 않는 경우 오류발생." classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.045"/>
  <testcase name="임시배정이 되지 않은 좌석인 경우 예약 불가" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.043"/>
  <testcase name="이미 판매가 완료된 좌석의 경우 오류 발생" classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.041"/>
  <testcase name="임시배정한 사용자ID와 결제요청한 사용자ID가 다른 경우 오류발생." classname="com.tdd.concert.api.usecase.PaymentIntegrationTest" time="0.04"/>
  <system-out><![CDATA[2024-04-18T23:25:01.505+09:00  INFO 4019 --- [concert] [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.tdd.concert.api.usecase.PaymentIntegrationTest]: PaymentIntegrationTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-04-18T23:25:01.507+09:00  INFO 4019 --- [concert] [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.tdd.concert.ConcertApplication for test class com.tdd.concert.api.usecase.PaymentIntegrationTest
Hibernate: insert into user (point,token) values (?,?)
2024-04-18T23:25:01.517+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 03afdbd6-6e79-39b1-a5f8-597834fa83a4, 사용자ID : 63
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-04-18T23:25:01.520+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seat (concert_id,concert_schedule_id,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
2024-04-18T23:25:01.534+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
2024-04-18T23:25:01.538+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-04-18T23:25:01.542+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
2024-04-18T23:25:01.568+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-18T23:25:01.568+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: update seat set concert_id=?,concert_schedule_id=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
Hibernate: select r1_0.reservation_id,r1_0.concert_id,r1_0.reservation_date,r1_0.reservation_status,r1_0.seat_id,r1_0.user_id from reservation r1_0 where r1_0.user_id=? and r1_0.seat_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into payment (created_at,pay_amount,reservation_id,user_id) values (?,?,?,?)
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: update token set created_at=?,expired_at=?,progress_status=?,token=?,updated_at=?,user_id=?,wait_no=? where token_id=?
Hibernate: update seat set concert_id=?,concert_schedule_id=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: update reservation set concert_id=?,reservation_date=?,reservation_status=?,seat_id=?,user_id=? where reservation_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
Hibernate: select r1_0.reservation_id,r1_0.concert_id,r1_0.reservation_date,r1_0.reservation_status,r1_0.seat_id,r1_0.user_id from reservation r1_0 where r1_0.user_id=? and r1_0.seat_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-04-18T23:25:01.631+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : ea5d2f1c-4608-332e-87d3-aa3d998e5135, 사용자ID : 64
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-04-18T23:25:01.635+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seat (concert_id,concert_schedule_id,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
2024-04-18T23:25:01.646+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
2024-04-18T23:25:01.648+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-04-18T23:25:01.651+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
2024-04-18T23:25:01.653+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-18T23:25:01.653+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: update token set created_at=?,expired_at=?,progress_status=?,token=?,updated_at=?,user_id=?,wait_no=? where token_id=?
Hibernate: update seat set concert_id=?,concert_schedule_id=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: insert into user (point,token) values (?,?)
2024-04-18T23:25:01.679+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : fc490ca4-5c00-3124-9bbe-3554a4fdf6fb, 사용자ID : 65
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-04-18T23:25:01.682+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seat (concert_id,concert_schedule_id,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
2024-04-18T23:25:01.692+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
2024-04-18T23:25:01.694+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-04-18T23:25:01.696+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
2024-04-18T23:25:01.698+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-18T23:25:01.699+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: update token set created_at=?,expired_at=?,progress_status=?,token=?,updated_at=?,user_id=?,wait_no=? where token_id=?
Hibernate: update seat set concert_id=?,concert_schedule_id=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: insert into user (point,token) values (?,?)
2024-04-18T23:25:01.722+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 3295c76a-cbf4-3aae-933c-36b1b5fc2cb1, 사용자ID : 66
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-04-18T23:25:01.727+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seat (concert_id,concert_schedule_id,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
2024-04-18T23:25:01.738+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
2024-04-18T23:25:01.741+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-04-18T23:25:01.743+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
2024-04-18T23:25:01.745+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-18T23:25:01.745+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: insert into user (point,token) values (?,?)
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token is null
Hibernate: insert into user (point,token) values (?,?)
2024-04-18T23:25:01.767+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db, 사용자ID : 68
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-04-18T23:25:01.770+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seat (concert_id,concert_schedule_id,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
2024-04-18T23:25:01.782+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
2024-04-18T23:25:01.784+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-04-18T23:25:01.787+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
2024-04-18T23:25:01.789+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-18T23:25:01.789+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: update seat set concert_id=?,concert_schedule_id=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
Hibernate: insert into user (point,token) values (?,?)
2024-04-18T23:25:01.811+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 14bfa6bb-1487-3e45-bba0-28a21ed38046, 사용자ID : 69
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-04-18T23:25:01.814+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seat (concert_id,concert_schedule_id,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
2024-04-18T23:25:01.823+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
2024-04-18T23:25:01.827+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-04-18T23:25:01.830+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
2024-04-18T23:25:01.832+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-18T23:25:01.832+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: update seat set concert_id=?,concert_schedule_id=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
Hibernate: insert into user (point,token) values (?,?)
2024-04-18T23:25:01.854+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 7cbbc409-ec99-3f19-878c-75bd1e06f215, 사용자ID : 70
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-04-18T23:25:01.857+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seat (concert_id,concert_schedule_id,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
2024-04-18T23:25:01.865+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 예약 시작
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
2024-04-18T23:25:01.868+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 사용자 검증 완료
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-04-18T23:25:01.870+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 콘서트 조회완료
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
2024-04-18T23:25:01.872+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.api.usecase.ReserveSeatUseCase     : [ReserveSeatUseCase] 좌석 Occupy 완료
2024-04-18T23:25:01.872+09:00  INFO 4019 --- [concert] [    Test worker] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: update seat set concert_id=?,concert_schedule_id=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: select s1_0.seat_id,s1_0.concert_id,s1_0.concert_schedule_id,s1_0.price,s1_0.seat_no,s1_0.seat_status,s1_0.temp_reserved_expired_at,s1_0.temp_reserved_user_id from seat s1_0 join concert_schedule cs1_0 on cs1_0.concert_schedule_id=s1_0.concert_schedule_id where s1_0.seat_no=? and s1_0.concert_id=? and cs1_0.concert_date=? for update
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
