<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.tdd.concert.api.concurrency.ReservationSeatPessimisticLockTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2024-05-05T13:08:55" hostname="Jeongui-MacBookPro.local" time="2.911">
  <properties/>
  <testcase name="다수의 요청자가 1개의 좌석을 동시에 예약하려고 한다." classname="com.tdd.concert.api.concurrency.ReservationSeatPessimisticLockTest" time="2.911"/>
  <system-out><![CDATA[22:08:44.516 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.tdd.concert.api.concurrency.ReservationSeatPessimisticLockTest]: ReservationSeatPessimisticLockTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
22:08:44.703 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.tdd.concert.ConcertApplication for test class com.tdd.concert.api.concurrency.ReservationSeatPessimisticLockTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.4)

2024-05-05T22:08:45.246+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.a.c.ReservationSeatPessimisticLockTest : Starting ReservationSeatPessimisticLockTest using Java 17.0.6 with PID 1552 (started by jeonghokang in /Users/jeonghokang/IdeaProjects/hhplus/week3)
2024-05-05T22:08:45.248+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.a.c.ReservationSeatPessimisticLockTest : The following 1 profile is active: "dev"
2024-05-05T22:08:46.700+09:00  INFO 1552 --- [concert-dev] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2024-05-05T22:08:46.703+09:00  INFO 1552 --- [concert-dev] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-05-05T22:08:47.129+09:00  INFO 1552 --- [concert-dev] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 412 ms. Found 11 JPA repository interfaces.
2024-05-05T22:08:47.149+09:00  INFO 1552 --- [concert-dev] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2024-05-05T22:08:47.150+09:00  INFO 1552 --- [concert-dev] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-05-05T22:08:47.172+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.concert.repository.ConcertJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.172+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.concert.repository.ConcertScheduleJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.173+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.payment.repository.PaymentJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.173+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.point.repository.PointJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.173+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.reservation.repository.ReservationJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.174+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.seat.repository.SeatJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.174+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.seat_distribute.repository.SeatJpaRepositoryD; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.175+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.seat_optimistic.repository.SeatJpaRepositoryO; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.175+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.seat_pessimistic.repository.SeatJpaRepositoryP; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.176+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.token.repository.TokenJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.177+09:00  INFO 1552 --- [concert-dev] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.tdd.concert.domain.user.repository.UserJpaRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-05-05T22:08:47.177+09:00  INFO 1552 --- [concert-dev] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18 ms. Found 0 Redis repository interfaces.
2024-05-05T22:08:48.045+09:00  INFO 1552 --- [concert-dev] [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-05-05T22:08:48.106+09:00  INFO 1552 --- [concert-dev] [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.4.4.Final
2024-05-05T22:08:48.142+09:00  INFO 1552 --- [concert-dev] [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-05-05T22:08:48.398+09:00  INFO 1552 --- [concert-dev] [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-05-05T22:08:48.435+09:00  INFO 1552 --- [concert-dev] [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-05-05T22:08:48.789+09:00  INFO 1552 --- [concert-dev] [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@593354fa
2024-05-05T22:08:48.791+09:00  INFO 1552 --- [concert-dev] [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-05-05T22:08:50.173+09:00  INFO 1552 --- [concert-dev] [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: alter table concert_schedule drop foreign key FK3ry7aiaia6ooa3ajwf6w6soci
Hibernate: alter table payment drop foreign key FKrewpj5f9v9xehy4ga8g221nw1
Hibernate: alter table payment drop foreign key FK4spfnm9si9dowsatcqs5or42i
Hibernate: alter table point_history drop foreign key FK9yptgx9qhcp768sokuopwxncm
Hibernate: alter table reservation drop foreign key FKjnsh2q045ch4uso5vnb0477dq
Hibernate: alter table reservation drop foreign key FKewd3sohjspqf2sjjvdcmcefpb
Hibernate: alter table reservation drop foreign key FKm4oimk0l1757o9pwavorj6ljg
Hibernate: alter table seat drop foreign key FKg0ccmmdn3894408ig1rdcgm9g
Hibernate: alter table seat drop foreign key FKjtsoupodivwr6xa4vk02e2qol
Hibernate: alter table seato drop foreign key FKp2yoxms6ii7wreqi2oxw91rsq
Hibernate: alter table seato drop foreign key FKayp8dca2osg0hxv81nprkbgag
Hibernate: alter table token drop foreign key FKe32ek7ixanakfqsdaokm4q9y2
Hibernate: drop table if exists concert
Hibernate: drop table if exists concert_schedule
Hibernate: drop table if exists payment
Hibernate: drop table if exists point_history
Hibernate: drop table if exists reservation
Hibernate: drop table if exists seat
Hibernate: drop table if exists seatd
Hibernate: drop table if exists seato
Hibernate: drop table if exists seatp
Hibernate: drop table if exists token
Hibernate: drop table if exists user
Hibernate: create table concert (concert_id bigint not null auto_increment, name varchar(255), singer varchar(255), primary key (concert_id)) engine=InnoDB
Hibernate: create table concert_schedule (concert_date date, concert_id bigint, concert_schedule_id bigint not null auto_increment, primary key (concert_schedule_id)) engine=InnoDB
Hibernate: create table payment (pay_amount integer, created_at datetime(6), payment_id bigint not null auto_increment, reservation_id bigint, user_id bigint, primary key (payment_id)) engine=InnoDB
Hibernate: create table point_history (amount integer, point_rscd tinyint check (point_rscd between 0 and 1), created_at datetime(6), point_history_id bigint not null auto_increment, user_id bigint, primary key (point_history_id)) engine=InnoDB
Hibernate: create table reservation (reservation_date date, reservation_status tinyint check (reservation_status between 0 and 2), concert_id bigint, reservation_id bigint not null auto_increment, seat_id bigint, user_id bigint, primary key (reservation_id)) engine=InnoDB
Hibernate: create table seat (price integer, seat_status tinyint check (seat_status between 0 and 2), concert_id bigint, concert_schedule_id bigint, seat_id bigint not null auto_increment, seat_no bigint, temp_reserved_expired_at datetime(6), temp_reserved_user_id bigint, primary key (seat_id)) engine=InnoDB
Hibernate: create table seatd (concert_schedule date, price integer, seat_status tinyint check (seat_status between 0 and 2), concert_id bigint, seat_id bigint not null auto_increment, seat_no bigint, temp_reserved_expired_at datetime(6), temp_reserved_user_id bigint, primary key (seat_id)) engine=InnoDB
Hibernate: create table seato (price integer, seat_status tinyint check (seat_status between 0 and 2), concert_id bigint, concert_schedule_id bigint, seat_id bigint not null auto_increment, seat_no bigint, temp_reserved_expired_at datetime(6), temp_reserved_user_id bigint, version bigint, primary key (seat_id)) engine=InnoDB
Hibernate: create table seatp (concert_schedule date, price integer, seat_status tinyint check (seat_status between 0 and 2), concert_id bigint, seat_id bigint not null auto_increment, seat_no bigint, temp_reserved_expired_at datetime(6), temp_reserved_user_id bigint, primary key (seat_id)) engine=InnoDB
Hibernate: create table token (progress_status tinyint check (progress_status between 0 and 3), created_at datetime(6), expired_at datetime(6), token_id bigint not null auto_increment, updated_at datetime(6), user_id bigint, wait_no bigint, token varchar(255), primary key (token_id)) engine=InnoDB
Hibernate: create table user (point integer, user_id bigint not null auto_increment, token varchar(255), primary key (user_id)) engine=InnoDB
Hibernate: alter table payment add constraint UK_3llq7oxcs9j7vlujfdf16jmu unique (reservation_id)
Hibernate: alter table reservation add constraint UK_cpo7s1xo509p8s2b4nocw6cq5 unique (seat_id)
Hibernate: alter table concert_schedule add constraint FK3ry7aiaia6ooa3ajwf6w6soci foreign key (concert_id) references concert (concert_id)
Hibernate: alter table payment add constraint FKrewpj5f9v9xehy4ga8g221nw1 foreign key (reservation_id) references reservation (reservation_id)
Hibernate: alter table payment add constraint FK4spfnm9si9dowsatcqs5or42i foreign key (user_id) references user (user_id)
Hibernate: alter table point_history add constraint FK9yptgx9qhcp768sokuopwxncm foreign key (user_id) references user (user_id)
Hibernate: alter table reservation add constraint FKjnsh2q045ch4uso5vnb0477dq foreign key (concert_id) references concert (concert_id)
Hibernate: alter table reservation add constraint FKewd3sohjspqf2sjjvdcmcefpb foreign key (seat_id) references seat (seat_id)
Hibernate: alter table reservation add constraint FKm4oimk0l1757o9pwavorj6ljg foreign key (user_id) references user (user_id)
Hibernate: alter table seat add constraint FKg0ccmmdn3894408ig1rdcgm9g foreign key (concert_id) references concert (concert_id)
Hibernate: alter table seat add constraint FKjtsoupodivwr6xa4vk02e2qol foreign key (concert_schedule_id) references concert_schedule (concert_schedule_id)
Hibernate: alter table seato add constraint FKp2yoxms6ii7wreqi2oxw91rsq foreign key (concert_id) references concert (concert_id)
Hibernate: alter table seato add constraint FKayp8dca2osg0hxv81nprkbgag foreign key (concert_schedule_id) references concert_schedule (concert_schedule_id)
Hibernate: alter table token add constraint FKe32ek7ixanakfqsdaokm4q9y2 foreign key (user_id) references user (user_id)
2024-05-05T22:08:50.771+09:00  INFO 1552 --- [concert-dev] [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-05-05T22:08:51.198+09:00  INFO 1552 --- [concert-dev] [    Test worker] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2024-05-05T22:08:53.046+09:00  INFO 1552 --- [concert-dev] [    Test worker] org.redisson.Version                     : Redisson 3.18.0
2024-05-05T22:08:53.065+09:00  WARN 1552 --- [concert-dev] [    Test worker] i.n.r.d.DnsServerAddressStreamProviders  : Can not find io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider in the classpath, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on 'io.netty:netty-resolver-dns-native-macos'
2024-05-05T22:08:53.241+09:00  INFO 1552 --- [concert-dev] [isson-netty-2-6] o.r.c.pool.MasterPubSubConnectionPool    : 1 connections initialized for localhost/127.0.0.1:6379
2024-05-05T22:08:53.305+09:00  INFO 1552 --- [concert-dev] [sson-netty-2-20] o.r.c.pool.MasterConnectionPool          : 24 connections initialized for localhost/127.0.0.1:6379
2024-05-05T22:08:53.717+09:00  WARN 1552 --- [concert-dev] [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-05-05T22:08:55.080+09:00  INFO 1552 --- [concert-dev] [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:mysql://127.0.0.1:3306/concert'
2024-05-05T22:08:55.187+09:00  INFO 1552 --- [concert-dev] [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint(s) beneath base path '/actuator'
2024-05-05T22:08:55.309+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.a.c.ReservationSeatPessimisticLockTest : Started ReservationSeatPessimisticLockTest in 10.432 seconds (process running for 12.132)
Hibernate: insert into concert (name,singer) values (?,?)
Hibernate: insert into concert_schedule (concert_id,concert_date) values (?,?)
Hibernate: insert into seatp (concert_id,concert_schedule,price,seat_no,seat_status,temp_reserved_expired_at,temp_reserved_user_id) values (?,?,?,?,?,?,?)
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.123+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c4ca4238-a0b9-3382-8dcc-509a6f75849b, 사용자ID : 1
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.220+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 0
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.347+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c81e728d-9d4c-3f63-af06-7f89cc14862c, 사용자ID : 2
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.352+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 1
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.372+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3, 사용자ID : 3
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.377+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 2
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.396+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : a87ff679-a2f3-371d-9181-a67b7542122c, 사용자ID : 4
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.399+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 3
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.417+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : e4da3b7f-bbce-3345-9777-2b0674a318d5, 사용자ID : 5
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.422+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 4
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.440+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 1679091c-5a88-3faf-afb5-e6087eb1b2dc, 사용자ID : 6
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.444+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 5
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.463+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 8f14e45f-ceea-367a-9a36-dedd4bea2543, 사용자ID : 7
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.467+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 6
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.485+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c9f0f895-fb98-3b91-99f5-1fd0297e236d, 사용자ID : 8
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.490+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 7
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.508+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26, 사용자ID : 9
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.513+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 8
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.531+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d3d94468-02a4-3259-b55d-38e6d163e820, 사용자ID : 10
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.534+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 9
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.553+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 6512bd43-d9ca-36e0-ac99-0b0a82652dca, 사용자ID : 11
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.557+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 10
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.572+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c20ad4d7-6fe9-3759-aa27-a0c99bff6710, 사용자ID : 12
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.576+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 11
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.592+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c51ce410-c124-310e-8db5-e4b97fc2af39, 사용자ID : 13
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.596+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 12
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.611+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : aab32389-22bc-325a-af60-6eb525ffdc56, 사용자ID : 14
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.615+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 13
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.630+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3, 사용자ID : 15
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.634+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 14
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.650+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c74d97b0-1eae-357e-84aa-9d5bade97baf, 사용자ID : 16
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.655+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 15
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.672+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 70efdf2e-c9b0-3607-9795-c442636b55fb, 사용자ID : 17
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.675+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 16
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.690+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 6f4922f4-5568-361a-8cdf-4ad2299f6d23, 사용자ID : 18
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.694+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 17
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.709+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 1f0e3dad-9990-3345-b743-9f8ffabdffc4, 사용자ID : 19
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.712+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 18
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.726+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 98f13708-2101-34c4-b568-7be6106a3b84, 사용자ID : 20
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.729+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 19
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.743+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 3c59dc04-8e88-3024-bbe8-079a5c74d079, 사용자ID : 21
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.747+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 20
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.762+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : b6d767d2-f8ed-3d21-a44b-0e5886680cb9, 사용자ID : 22
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.765+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 21
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.779+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 37693cfc-7480-39e4-9d87-b8c7d8b9aacd, 사용자ID : 23
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.782+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 22
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.795+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 1ff1de77-4005-38da-93f4-2943881c655f, 사용자ID : 24
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.799+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 23
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.812+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 8e296a06-7a37-3633-b0de-d05f5a3bf3ec, 사용자ID : 25
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.816+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 24
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.829+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 4e732ced-3463-306d-a0ca-9a15b6153677, 사용자ID : 26
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.833+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 25
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.847+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0, 사용자ID : 27
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.850+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 26
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.863+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 33e75ff0-9dd6-31bb-a69f-351039152189, 사용자ID : 28
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.866+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 27
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.878+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 6ea9ab1b-aa0e-3b9e-9909-4440c317e21b, 사용자ID : 29
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.882+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 28
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.894+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 34173cb3-8f07-389d-9beb-c2ac9128303f, 사용자ID : 30
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.897+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 29
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.911+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c16a5320-fa47-3530-9958-3c34fd356ef5, 사용자ID : 31
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.914+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 30
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.927+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01, 사용자ID : 32
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.931+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 31
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.945+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 182be0c5-cdcd-3072-bb18-64cdee4d3d6e, 사용자ID : 33
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.949+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 32
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.962+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : e369853d-f766-3a44-a1ed-0ff613f563bd, 사용자ID : 34
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.966+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 33
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.981+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 1c383cd3-0b7c-398a-b502-93adfecb7b18, 사용자ID : 35
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:56.985+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 34
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:56.997+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 19ca14e7-ea63-38a4-ae0e-b13d585e4c22, 사용자ID : 36
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.000+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 35
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.013+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : a5bfc9e0-7964-38dd-9eb9-5fc584cd965d, 사용자ID : 37
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.016+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 36
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.029+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : a5771bce-93e2-30c3-af7c-d9dfd0e5deaa, 사용자ID : 38
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.032+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 37
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.044+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d67d8ab4-f4c1-3bf2-aaa3-53e27879133c, 사용자ID : 39
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.047+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 38
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.060+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d645920e-395f-3dad-bbbb-ed0eca3fe2e0, 사용자ID : 40
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.063+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 39
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.075+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 3416a75f-4cea-3109-907c-acd8e2f2aefc, 사용자ID : 41
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.078+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 40
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.091+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : a1d0c6e8-3f02-3327-9846-1063f4ac58a6, 사용자ID : 42
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.094+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 41
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.107+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 17e62166-fc85-36df-a4d1-bc0e1742c08b, 사용자ID : 43
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.110+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 42
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.122+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : f7177163-c833-3ff4-b38f-c8d2872f1ec6, 사용자ID : 44
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.125+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 43
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.137+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 6c8349cc-7260-3e62-a3b1-396831a8398f, 사용자ID : 45
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.140+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 44
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.151+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d9d4f495-e875-32e0-b5a1-a4a6e1b9770f, 사용자ID : 46
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.154+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 45
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.165+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7, 사용자ID : 47
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.167+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 46
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.179+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 642e92ef-b794-3173-8881-b53e1e1b18b6, 사용자ID : 48
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.182+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 47
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.195+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : f457c545-a9de-388f-98ec-ee47145a72c0, 사용자ID : 49
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.198+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 48
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.210+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c0c7c76d-30bd-3dca-afc9-6f40275bdc0a, 사용자ID : 50
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.213+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 49
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.226+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 2838023a-778d-3aec-9c21-2708f721b788, 사용자ID : 51
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.229+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.241+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 9a115815-4dfa-32ca-9dbd-0694a4e9bdc8, 사용자ID : 52
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.245+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.258+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d82c8d16-19ad-3176-9665-453cfb2e55f0, 사용자ID : 53
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.261+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.274+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : a684ecee-e76f-3522-b732-86a895bc8436, 사용자ID : 54
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.277+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.290+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : b53b3a3d-6ab9-3ce0-a682-29151c9bde11, 사용자ID : 55
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.293+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.306+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 9f61408e-3afb-333e-90cd-f1b20de6f466, 사용자ID : 56
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.309+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.322+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 72b32a1f-754b-31c0-9b36-95e0cb6cde7f, 사용자ID : 57
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.325+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.338+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 66f041e1-6a60-328b-85a7-e228a89c3799, 사용자ID : 58
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.342+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.355+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 093f65e0-80a2-35f8-876b-1c5722a46aa2, 사용자ID : 59
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.358+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.370+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 072b030b-a126-32f4-b237-4f342be9ed44, 사용자ID : 60
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.374+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.385+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 7f39f831-7fbd-3198-8ef4-c628eba02591, 사용자ID : 61
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.389+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.401+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 44f683a8-4163-3352-bafe-57c2e008bc8c, 사용자ID : 62
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.405+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.418+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 03afdbd6-6e79-39b1-a5f8-597834fa83a4, 사용자ID : 63
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.421+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.433+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : ea5d2f1c-4608-332e-87d3-aa3d998e5135, 사용자ID : 64
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.437+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.451+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : fc490ca4-5c00-3124-9bbe-3554a4fdf6fb, 사용자ID : 65
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.455+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.467+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 3295c76a-cbf4-3aae-933c-36b1b5fc2cb1, 사용자ID : 66
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.471+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.483+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 735b90b4-5681-35ed-ac3f-678819b6e058, 사용자ID : 67
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.487+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.501+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db, 사용자ID : 68
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.505+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.517+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 14bfa6bb-1487-3e45-bba0-28a21ed38046, 사용자ID : 69
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.520+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.533+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 7cbbc409-ec99-3f19-878c-75bd1e06f215, 사용자ID : 70
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.536+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.548+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : e2c420d9-28d4-3f8c-a0ff-2ec19b371514, 사용자ID : 71
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.551+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.564+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 32bb90e8-976a-3b52-98d5-da10fe66f21d, 사용자ID : 72
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.567+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.579+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d2ddea18-f006-35ce-8623-e36bd4e3c7c5, 사용자ID : 73
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.582+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.595+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : ad61ab14-3223-3fbc-a4c7-d2583be69251, 사용자ID : 74
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.598+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.610+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d09bf415-44a3-365a-86c9-077ebb5e35c3, 사용자ID : 75
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.613+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.625+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : fbd7939d-6749-37cd-b469-2d34de8633c4, 사용자ID : 76
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.627+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.640+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 28dd2c79-55ce-3264-9624-0b2ff0100bde, 사용자ID : 77
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.643+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.654+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 35f4a8d4-65e6-31ed-805f-3d8ab658c551, 사용자ID : 78
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.657+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.668+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : d1fe173d-08e9-3939-badf-34b1d77e88d7, 사용자ID : 79
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.672+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.684+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : f033ab37-c302-31f7-bf14-2449d037028d, 사용자ID : 80
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.687+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.702+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 43ec517d-68b6-3dd3-815b-3edc9a11367b, 사용자ID : 81
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.706+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.719+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 9778d5d2-19c5-380b-9a6a-17bef029331c, 사용자ID : 82
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.723+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.735+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : fe9fc289-c3ff-3af1-82b6-d3bead98a923, 사용자ID : 83
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.739+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.751+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 68d30a95-9472-3bc3-9aa2-4be94b319d21, 사용자ID : 84
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.755+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.767+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 3ef81541-6f77-3098-be97-7004015c6193, 사용자ID : 85
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.771+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.785+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 93db85ed-909c-3383-8ff9-5ccfa94cebd9, 사용자ID : 86
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.789+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.801+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : c7e1249f-fc03-3b9d-ad90-8c236bd1996d, 사용자ID : 87
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.805+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.816+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 2a38a4a9-316c-39e5-a833-517c45d31070, 사용자ID : 88
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.819+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.833+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 7647966b-7343-3290-8867-3252e490f736, 사용자ID : 89
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.835+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.848+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 8613985e-c49e-38f7-97ae-6439e879bb2a, 사용자ID : 90
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.851+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.865+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 54229abf-cfa5-349e-b003-b83dd4755294, 사용자ID : 91
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.868+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.881+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 92cc2275-32d1-3e56-a079-02b254dfad10, 사용자ID : 92
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.884+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.898+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 98dce83d-a57b-3395-a163-467c9dae521b, 사용자ID : 93
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.901+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.915+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : f4b9ec30-ad9f-38f8-9b29-639786cb62ef, 사용자ID : 94
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.917+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.931+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 812b4ba2-87f5-3e0b-89d4-3bbf5bbe87fb, 사용자ID : 95
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.933+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.948+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : 26657d5f-f902-3d2a-befe-558796b99584, 사용자ID : 96
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.951+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.964+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : e2ef524f-bf3d-3fe6-91d5-a8e90fefdc9c, 사용자ID : 97
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.966+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.979+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : ed3d2c21-991e-3bef-9e06-9713af9fa6ca, 사용자ID : 98
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.982+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:57.996+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : ac627ab1-ccbd-362e-896e-702f07f6425b, 사용자ID : 99
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:57.999+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: insert into user (point,token) values (?,?)
2024-05-05T22:08:58.012+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenGenerator   : [토큰 생성] UUID 토큰 : f899139d-f5e1-3593-9643-1415e770c6dd, 사용자ID : 100
Hibernate: select (coalesce(max(t1_0.wait_no),0)+1) from token t1_0
Hibernate: select coalesce(count(t1_0.progress_status),0) from token t1_0 where t1_0.progress_status=?
2024-05-05T22:08:58.015+09:00  INFO 1552 --- [concert-dev] [    Test worker] c.t.c.d.token.component.TokenReader      : [getCurrentQueueStatus] 예약 진행중인 고객수 : 50
Hibernate: insert into token (created_at,expired_at,progress_status,token,updated_at,user_id,wait_no) values (?,?,?,?,?,?,?)
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=? for update
Hibernate: update user set point=?,token=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
2024-05-05T22:08:58.048+09:00  INFO 1552 --- [concert-dev] [pool-2-thread-1] c.t.c.d.seat_pessimistic.model.SeatP     : [Seat 엔티티 내부] tempOccupy 완료. 사용자 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
2024-05-05T22:08:58.049+09:00  INFO 1552 --- [concert-dev] [pool-2-thread-1] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 시작
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select t1_0.token_id,t1_0.created_at,t1_0.expired_at,t1_0.progress_status,t1_0.token,t1_0.updated_at,t1_0.user_id,t1_0.wait_no from token t1_0 where t1_0.token=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
2024-05-05T22:08:58.081+09:00  INFO 1552 --- [concert-dev] [pool-2-thread-1] c.t.c.d.r.c.ReservationValidator         : [ReservationValidator] validate 메서드 종료
2024-05-05T22:08:58.081+09:00  INFO 1552 --- [concert-dev] [pool-2-thread-1] c.t.c.d.r.component.ReservationStore     : [ReservationStore] reserveSeat 메서드 진입
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: insert into reservation (concert_id,reservation_date,reservation_status,seat_id,user_id) values (?,?,?,?,?)
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: update seatp set concert_id=?,concert_schedule=?,price=?,seat_no=?,seat_status=?,temp_reserved_expired_at=?,temp_reserved_user_id=? where seat_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select u1_0.user_id,u1_0.point,u1_0.token from user u1_0 where u1_0.user_id=?
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select c1_0.concert_id,c1_0.name,c1_0.singer from concert c1_0 where c1_0.concert_id=?
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=? for update
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
[Exception] 예외 발생 : 이미 다른 사용자에게 임시배정된 좌석입니다. 좌석번호 : 1
Hibernate: select sp1_0.seat_id,sp1_0.concert_id,sp1_0.concert_schedule,sp1_0.price,sp1_0.seat_no,sp1_0.seat_status,sp1_0.temp_reserved_expired_at,sp1_0.temp_reserved_user_id from seatp sp1_0 where sp1_0.seat_id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
